name: Build Image and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'gradle'

      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1
        with:
          arch: amd64

      - name: Set Custom Endpoint
        if: vars.AWS_ENDPOINT != ''
        run: echo "AWS_ENDPOINT_URL=${{ vars.AWS_ENDPOINT }}" >> $GITHUB_ENV

      # This will only work for a single ECR region.
      # For now, I will keep it simple and use a single "main" region.
      - name: Fetch Latest Image Tag from AWS ECR
        id: fetch-latest-tag
        run: |
          echo "latest_tag=$(aws ecr describe-images --repository-name courses-service --region ${{ vars.AWS_REGION }} --endpoint-url=${{ env.AWS_ENDPOINT_URL }} --query 'max_by(imageDetails, &imagePushedAt) | imageTags | [0]' | awk -F'[-.]' '{print $3}')" >> $GITHUB_OUTPUT

      - name: Get Project Version
        id: version
        uses: christian-draeger/read-properties@1.1.1
        with:
          path: './gradle.properties'
          properties: 'version'

      - name: Set Patch Version
        id: set-patch
        run: echo "patch=$((${{ steps.fetch-latest-tag.outputs.latest_tag }} + 1))" >> $GITHUB_OUTPUT

      - name: Get Shortened Git Commit
        id: commit
        run: echo "commit=$(git log --pretty=format:'%h' -n 1)" >> $GITHUB_OUTPUT

      - name: Construct Service Version
        id: full-version
        run: echo "version=${{ steps.version.outputs.version }}.${{ steps.set-patch.outputs.patch }}-${{ steps.commit.outputs.commit }}" >> $GITHUB_OUTPUT

      - name: Build and Package Spring Microservice
        run: ./gradlew build -Pversion=${{ steps.full-version.outputs.version }}

      - name: Build Docker Image
        run: |
          docker build --build-arg SERVICE_VERSION=${{ steps.full-version.outputs.version }} -t courses-service:${{ steps.full-version.outputs.version }} .

      - name: Login to AWS ECR
        run:
          docker login -u AWS -p ${{ SECRETS.ECR_PASSWORD }} ${{ vars.REPOSITORY_ENDPOINT }}/courses-service

      - name: Publish Image to AWS ECR
        run: |
          docker tag courses-service:${{ steps.full-version.outputs.version }} ${{ vars.REPOSITORY_ENDPOINT }}/courses-service:${{ steps.full-version.outputs.version }}
          docker push ${{ vars.REPOSITORY_ENDPOINT }}/courses-service:${{ steps.full-version.outputs.version }}

      - name: Publish Non-Production Image
        if: github.ref != 'refs/heads/main'
        run: |
          docker tag ${{ vars.REPOSITORY_ENDPOINT }}/courses-service:${{ steps.full-version.outputs.version }} ${{ vars.REPOSITORY_ENDPOINT }}/courses-service:non-production
          docker push ${{ vars.REPOSITORY_ENDPOINT }}/courses-service:non-production
